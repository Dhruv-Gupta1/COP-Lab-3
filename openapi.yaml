openapi: 3.0.3
info:
  title: queriKorner - OpenAPI 3.0
  description: |-
    This is the API documentation of the queriKorner server application. It is based on the OpenAPI 3.0 specification.
  version: 1.0.11

tags:

  - name: Question
    description: ask queries 

  - name: Answer
    description: post answers to questions
    

  - name: User
    description: information about users
    
  - name: Tags
    description: description about tags
    
    
  - name: Search
    description: get answers to your queries
    
paths:
#POST /question
  /question:
    post:
      tags:
        - Question
      summary: Ask your query
      description: Ask your query
      operationId: askQuery
      requestBody:
        description: Query to be added to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
          application/xml:
            schema:
              $ref: '#/components/schemas/Question'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Question'          
            application/xml:
              schema:
                  $ref: '#/components/schemas/Question'
        '400':
          description: Invalid question
        '404':
          description: Question not found
      security:
        - ask_auth:
            - 'write:answers'
            - 'read:answers'
#/question/{questionId}
  /question/{questionId}:
    get:
      tags:
        - Question
      summary: Get all query data
      description: Get all query data
      operationId: getData
      parameters:
        - name: questionId
          in: query
          description: Query data
          required: false
          explode: true
          schema:
            type: string
            example: "71932"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Question'          
            application/xml:
              schema:
                  $ref: '#/components/schemas/Question'
        '400':
          description: Invalid data format
        '404':
          description: Question not found
      security:
        - ask_auth:
            - 'write:answers'
            - 'read:answers'
#DELETE
    delete:
      tags:
        - Question
      summary: Delete a query
      description: Delete a query
      operationId: deleteQuery
      parameters:
        - name: questionId
          in: query
          description: Query data
          required: false
          explode: true
          schema:
            type: string
            example: "71932"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Question'     
            application/xml:
              schema:
                  $ref: '#/components/schemas/Question'
        '400':
          description: Invalid data format
        '404':
          description: Question not found
      security:
        - ask_auth:
            - 'write:answers'
            - 'read:answers'
#PUT /question/{questionId} 
    put:
      tags:
        - Question
      summary: Change question data
      description: Change question data
      operationId: changeQuestion
      parameters:
        - name: questionId
          in: query
          description: Query data
          required: false
          explode: true
          schema:
            type: string
            example: "71932"
      requestBody:
        description: Query to be added to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
          application/xml:
            schema:
              $ref: '#/components/schemas/Question'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Question'  
            application/xml:
              schema:
                  $ref: '#/components/schemas/Question'
        '400':
          description: Invalid data format
        '404':
          description: Question not found
      security:
        - ask_auth:
            - 'write:answers'
            - 'read:answers'
#PUT /question/votes/{questionId} upvote/downvote
  /question/votes/{questionId}:
    put:
      tags:
        - Question
      summary: Upvote/Downvote a question
      description: Upvote/Downvote a question
      operationId: upvoteQuestion
      parameters:
        - name: questionId
          in: query
          description: Question id
          required: false
          explode: true
          schema:
            type: string
            example: "71932"
      requestBody:
        description: Query to be added to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
          application/xml:
            schema:
              $ref: '#/components/schemas/Question'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Question'   
            application/xml:
              schema:
                  $ref: '#/components/schemas/Question'
        '400':
          description: Invalid data format
        '404':
          description: Question not found
      security:
        - ask_auth:
            - 'write:answers'
            - 'read:answers'
##
# /answer Answer POST API
  /answer/{questionId}:
    post:
      tags:
        - Answer
      summary: Post your answer
      description: Post your answer
      operationId: postAnswer
      requestBody:
        description: Answer to be added to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Answer'
          application/xml:
            schema:
              $ref: '#/components/schemas/Answer'
        required: true
      parameters:
        - name: questionId
          in: query
          description: Query data
          required: false
          explode: true
          schema:
            type: string
            example: "71932"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Answer'
            application/xml:
              schema:
                  $ref: '#/components/schemas/Answer'
        '400':
          description: Invalid answer
        '404':
          description: Answer not found
      security:
        - ask_auth:
            - 'write:answers'
            - 'read:answers'
# /answer/{answerId} Answer GET API
  /answer/{answerId}:
    get:
      tags:
        - Answer
      summary: Get all answer data
      description: Get all answer data
      operationId: getData
      parameters:
        - name: answerId
          in: query
          description: Answer data
          required: false
          explode: true
          schema:
            type: string
            example: "71932"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Answer'       
            application/xml:
              schema:
                  $ref: '#/components/schemas/Answer'
        '400':
          description: Invalid data format
        '404':
          description: Answer not found
      security:
        - ask_auth:
            - 'write:answers'
            - 'read:answers'
# /answer DELETE API
    delete:
      tags:
        - Answer
      summary: Delete an answer
      description: Delete an answer
      operationId: deleteAnswer
      parameters:
        - name: answerId
          in: query
          description: Answer data
          required: false
          explode: true
          schema:
            type: string
            example: "71932"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Answer'        
            application/xml:
              schema:
                  $ref: '#/components/schemas/Answer'
        '400':
          description: Invalid data format
        '404':
          description: Answer not found
      security:
        - ask_auth:
            - 'write:answers'
            - 'read:answers'
# /answer PUT API
    put:
      tags:
        - Answer
      summary: Change data of answer
      description: Change data of answer
      operationId: changeAnswer
      parameters:
        - name: answerId
          in: query
          description: Answer data
          required: false
          explode: true
          schema:
            type: string
            example: "71932"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Answer'       
            application/xml:
              schema:
                  $ref: '#/components/schemas/Answer'
        '400':
          description: Invalid data format
        '404':
          description: Answer not found
      security:
        - ask_auth:
            - 'write:answers'
            - 'read:answers'
# /answer/votes/{answerId} PUT upvote/downvote
  /answer/votes/{answerId}:
    put:
      tags:
        - Answer
      summary: Upvote/Downvote an answer
      description: Upvote/Downvote an answer
      operationId: upvoteAnswer
      parameters:
        - name: answerId
          in: query
          description: Answer id
          required: false
          explode: true
          schema:
            type: string
            example: "71932"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Answer'
            application/xml:
              schema:
                  $ref: '#/components/schemas/Answer'
        '400':
          description: Invalid data format
        '404':
          description: Answer not found
      security:
        - ask_auth:
            - 'write:answers'
            - 'read:answers'
# /user User POST API
  /user:
    post:
      tags:
        - User
      summary: Create user
      description: Create user
      operationId: createUser
      requestBody:
        description: User to be added to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                  $ref: '#/components/schemas/User'
        '400':
          description: Invalid data format
        '404':
          description: User not found
      security:
        - ask_auth:
            - 'write:answers'
            - 'read:answers'
# /user/{userId} User GET API
  /user/{userId}:
    get:
      tags:
        - User
      summary: Get user data
      description: Get user data
      operationId: getUserData
      parameters:
        - name: userId
          in: query
          description: User id
          required: false
          explode: true
          schema:
            type: string
            example: "71932"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/User'        
            application/xml:
              schema:
                  $ref: '#/components/schemas/User'
        '400':
          description: Invalid data format
        '404':
          description: User not found
      security:
        - ask_auth:
            - 'write:answers'
            - 'read:answers'
# /user/{userId} User DELETE API
    delete:
      tags:
        - User
      summary: Delete an user
      description: Delete an user
      operationId: deleteUser
      parameters:
        - name: userId
          in: query
          description: User id
          required: false
          explode: true
          schema:
            type: string
            example: "71932"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/User'         
            application/xml:
              schema:
                  $ref: '#/components/schemas/User'
        '400':
          description: Invalid data format
        '404':
          description: User not found
      security:
        - ask_auth:
            - 'write:answers'
            - 'read:answers'
# /user/{userId} User PUT API
    put:
      tags:
        - User
      summary: Change data of user
      description: Change data of user
      operationId: changeUser
      parameters:
        - name: userId
          in: query
          description: User id
          required: false
          explode: true
          schema:
            type: string
            example: "71932"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/User'    
            application/xml:
              schema:
                  $ref: '#/components/schemas/User'
        '400':
          description: Invalid data format
        '404':
          description: User not found
      security:
        - ask_auth:
            - 'write:answers'
            - 'read:answers'
# /user/login User GET API take username password and create user
  /user/login:
    get:
      tags:
        - User
      summary: Login user
      description: Login user
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: Username
          required: false
          explode: true
          schema:
            type: string
            example: "kevin"
        - name: password
          in: query
          description: Password
          required: false
          explode: true
          schema:
            type: string
            example: "****"
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/User'         
            application/xml:
              schema:
                  $ref: '#/components/schemas/User'
        '400':
          description: Invalid Username/Password
      security:
        - ask_auth:
            - 'write:answers'
            - 'read:answers'
# /user/logout User GET API logs out user in active session
  /user/logout:
    get:
      tags:
        - User
      summary: Logout user
      description: Logout user
      operationId: logoutUser
      
      responses:
        '200':
          description: successful operation
    
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/User'     
            application/xml:
              schema:
                  $ref: '#/components/schemas/User'
        '400':
          description: Cant logout
        '404':
          description: User not found
      security:
        - ask_auth:
            - 'write:answers'
            - 'read:answers'
# /user/signup POST API 
  /user/signup:
    post:
      tags:
        - User
      summary: Create user
      description: Create user
      operationId: createUser
      parameters:
        - name: username
          in: query
          required: false
          explode: true
          schema:
            type: string
            example: "kevin"
        - name: email
          in: query
          required: false
          explode: true
          schema:
            type: string
            example: "kevin@iitd.ac.in"
        - name: password
          in: query
          required: false
          explode: true
          schema:
            type: string
            example: "****"
      requestBody:
        description: User to be added to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/User'     
            application/xml:
              schema:
                  $ref: '#/components/schemas/User'
        '400':
          description: Invalid data format
        '404':
          description: User not found
      security:
        - ask_auth:
            - 'write:answers'
            - 'read:answers'
# /tags POST API
  /tags:
    post:
      tags:
        - Tags
      summary: Create tag
      description: Create tag
      operationId: createTag
      requestBody:
        description: Tag to be added to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
          application/xml:
            schema:
              $ref: '#/components/schemas/Tag'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Tag'       
            application/xml:
              schema:
                  $ref: '#/components/schemas/Tag'
        '400':
          description: Invalid data format
        '404':
          description: Tag not found
      security:
        - ask_auth:
            - 'write:answers'
            - 'read:answers'
# /tags/{tagId} GET API access tag description
  /tags/{tagId}:
    get:
      tags:
        - Tags
      summary: Get tag data
      description: Get tag data
      operationId: getTagData
      parameters:
        - name: tagId
          in: query
          description: Tag id
          required: false
          explode: true
          schema:
            type: string
            example: "71932"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Tag'       
            application/xml:
              schema:
                  $ref: '#/components/schemas/Tag'
        '400':
          description: Invalid data format
        '404':
          description: Tag not found
      security:
        - ask_auth:
            - 'write:answers'
            - 'read:answers'
# /tags/{tagId} DELETE API delete tag
    delete:
      tags:
        - Tags
      summary: Delete an tag
      description: Delete an tag
      operationId: deleteTag
      parameters:
        - name: tagId
          in: query
          description: Tag id
          required: false
          explode: true
          schema:
            type: string
            example: "71932"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Tag'          
            application/xml:
              schema:
                  $ref: '#/components/schemas/Tag'
        '400':
          description: Invalid data format
        '404':
          description: Tag not found
      security:
        - ask_auth:
            - 'write:answers'
            - 'read:answers'
# /search/tags GET API search tags
  /search/tags:
    get:
      tags:
        - Search
      summary: Search tags
      description: Search tags
      operationId: searchTags
      parameters:
        - name: tags
          in: query
          description: Tags to search
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
            example: ["java", "python"]
      requestBody:
        description: search phrase
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Search'
          application/xml:
            schema:
              $ref: '#/components/schemas/Search'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Search'        
            application/xml:
              schema:
                  $ref: '#/components/schemas/Search'
        '400':
          description: Invalid data format
        '404':
          description: Tag not found
      security:
        - ask_auth:
            - 'write:answers'
            - 'read:answers' 
# /search/{sortId} GET API sort questions
  /search/{sortId}:
    get:
      tags:
        - Search
      summary: Sort questions
      description: Sort questions
      operationId: sortQuestions
      parameters:
        - name: sortId
          in: query
          description: Sort id
          required: false
          explode: true
          schema:
            type: string
            example: "popular"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Search'         
            application/xml:
              schema:
                  $ref: '#/components/schemas/Search'
        '400':
          description: Invalid data format
        '404':
          description: Tag not found
      security:
        - ask_auth:
            - 'write:answers'
            - 'read:answers'
#


components:
  schemas:
    #question schema
    Question:
      type: object
      properties:
        questionId:
          type: string
          example: "71932"
        Title:
          type: string
          example: "How to create a new file in Java?"
        Body:
          type: string
          example: "I am trying to create a new file in Java. I am using the following code but it is not working. Can anyone help me?"
        Tags:
          type: array
          items:
            type: string
          example: ["java", "file"]
        Votes:
          type: integer
          example: 10
        AnswerIds:
          type: array
          items:
            type: string
          example: ["213212", "314132"]
        NumberOfAnswers:
          type: integer
          example: 2
        CreatedAt:
          type: string
          example: "2019-10-10T12:00:00Z"
        Accepted:
          type: boolean
          example: false
        CreatedBy:
          type: string
          example: "Kevin"
    #
    Answer:
      type : object
      properties:
        answerId:
          type: string
          example: "71932"
        Body:
          type: string
          example: "Here is how to do it..."
        Votes:
          type: integer
          example: 10
        questionId:
          type: string
          example: "71932"
        CreatedBy:
          type: string
          example: "Andrew"
        CreatedAt:
          type: string
          example: "2019-10-10T12:00:00Z"
    #
    Tag:
      type: object
      properties:
        tagId:
          type: string
          example: "71932"
        Name:
          type: string
          example: "java"
        NumberOfQuestions:
          type: integer
          example: 1077
        description:
          type: string
          example: "Java is a general-purpose computer-programming language that is concurrent, class-based, object-oriented, and specifically designed to have as few implementation dependencies as possible."
    #
    User:
      type: object
      properties:
        userId:
          type: string
          example: "71932"
        username:
          type: string
          example: "Kevin"
        password:
          type: string
          example: "12434kevin@123777"
        rating:
          type: integer
          example: 1791
        QuestionsAsked:
          type: array
          example: ["71932", "71933"]
        NumberOfQuestionsAsked:
          type: integer
          example: 2
        AnswersGiven:
          type: array
          example: ["71932", "71933"]
        NumberOfAnswersGiven:
          type: integer
          example: 2
        ProfilePicture:
          type: string
          example: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
        email:
          type: string
          example: "kevin@iitd.ac.in" 
    #
    Search: 
      type: object
      properties:
        searchTags:
          type: array
          example: ["java", "python"]
        searchSort:
          type: string
          example: "popular"
        searchResults:
          type: array
          example: ["71932", "71933"]
        NumberOfSearchResults:
          type: integer
          example: 2
    # 
  requestBodies:
    Answer:
      description: Answers given to a question
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Answer'
        application/xml:
          schema:
            $ref: '#/components/schemas/Answer'
    User:
      description: user object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
        application/xml:
          schema:
            $ref: '#/components/schemas/User'
    Question:
      description: question object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Question'
        application/xml:
          schema:
            $ref: '#/components/schemas/Question'
    Tag:
      description: tag object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Tag'
        application/xml:
          schema:
            $ref: '#/components/schemas/Tag'
  securitySchemes:
    ask_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://queriKorner.swagger.io/oauth/authorize
          scopes:
            write:answers: modify answers in your account
            read:answers: read your answers
    api_key:
      type: apiKey
      name: api_key
      in: header