/*
 * queriKorner - OpenAPI 3.0
 * This is the API documentation of the queriKorner server application. It is based on the OpenAPI 3.0 specification.
 *
 * OpenAPI spec version: 1.0.11
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.QueriKornerOpenApi30);
  }
}(this, function(expect, QueriKornerOpenApi30) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Question', function() {
      beforeEach(function() {
        instance = new QueriKornerOpenApi30.Question();
      });

      it('should create an instance of Question', function() {
        // TODO: update the code to test Question
        expect(instance).to.be.a(QueriKornerOpenApi30.Question);
      });

      it('should have the property questionId (base name: "questionId")', function() {
        // TODO: update the code to test the property questionId
        expect(instance).to.have.property('questionId');
        // expect(instance.questionId).to.be(expectedValueLiteral);
      });

      it('should have the property title (base name: "Title")', function() {
        // TODO: update the code to test the property title
        expect(instance).to.have.property('title');
        // expect(instance.title).to.be(expectedValueLiteral);
      });

      it('should have the property body (base name: "Body")', function() {
        // TODO: update the code to test the property body
        expect(instance).to.have.property('body');
        // expect(instance.body).to.be(expectedValueLiteral);
      });

      it('should have the property tags (base name: "Tags")', function() {
        // TODO: update the code to test the property tags
        expect(instance).to.have.property('tags');
        // expect(instance.tags).to.be(expectedValueLiteral);
      });

      it('should have the property votes (base name: "Votes")', function() {
        // TODO: update the code to test the property votes
        expect(instance).to.have.property('votes');
        // expect(instance.votes).to.be(expectedValueLiteral);
      });

      it('should have the property answerIds (base name: "AnswerIds")', function() {
        // TODO: update the code to test the property answerIds
        expect(instance).to.have.property('answerIds');
        // expect(instance.answerIds).to.be(expectedValueLiteral);
      });

      it('should have the property numberOfAnswers (base name: "NumberOfAnswers")', function() {
        // TODO: update the code to test the property numberOfAnswers
        expect(instance).to.have.property('numberOfAnswers');
        // expect(instance.numberOfAnswers).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "CreatedAt")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property accepted (base name: "Accepted")', function() {
        // TODO: update the code to test the property accepted
        expect(instance).to.have.property('accepted');
        // expect(instance.accepted).to.be(expectedValueLiteral);
      });

      it('should have the property createdBy (base name: "CreatedBy")', function() {
        // TODO: update the code to test the property createdBy
        expect(instance).to.have.property('createdBy');
        // expect(instance.createdBy).to.be(expectedValueLiteral);
      });

    });
  });

}));
