/*
 * queriKorner - OpenAPI 3.0
 * This is the API documentation of the queriKorner server application. It is based on the OpenAPI 3.0 specification.
 *
 * OpenAPI spec version: 1.0.11
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.QueriKornerOpenApi30);
  }
}(this, function(expect, QueriKornerOpenApi30) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('User', function() {
      beforeEach(function() {
        instance = new QueriKornerOpenApi30.User();
      });

      it('should create an instance of User', function() {
        // TODO: update the code to test User
        expect(instance).to.be.a(QueriKornerOpenApi30.User);
      });

      it('should have the property userId (base name: "userId")', function() {
        // TODO: update the code to test the property userId
        expect(instance).to.have.property('userId');
        // expect(instance.userId).to.be(expectedValueLiteral);
      });

      it('should have the property username (base name: "username")', function() {
        // TODO: update the code to test the property username
        expect(instance).to.have.property('username');
        // expect(instance.username).to.be(expectedValueLiteral);
      });

      it('should have the property password (base name: "password")', function() {
        // TODO: update the code to test the property password
        expect(instance).to.have.property('password');
        // expect(instance.password).to.be(expectedValueLiteral);
      });

      it('should have the property rating (base name: "rating")', function() {
        // TODO: update the code to test the property rating
        expect(instance).to.have.property('rating');
        // expect(instance.rating).to.be(expectedValueLiteral);
      });

      it('should have the property questionsAsked (base name: "QuestionsAsked")', function() {
        // TODO: update the code to test the property questionsAsked
        expect(instance).to.have.property('questionsAsked');
        // expect(instance.questionsAsked).to.be(expectedValueLiteral);
      });

      it('should have the property numberOfQuestionsAsked (base name: "NumberOfQuestionsAsked")', function() {
        // TODO: update the code to test the property numberOfQuestionsAsked
        expect(instance).to.have.property('numberOfQuestionsAsked');
        // expect(instance.numberOfQuestionsAsked).to.be(expectedValueLiteral);
      });

      it('should have the property answersGiven (base name: "AnswersGiven")', function() {
        // TODO: update the code to test the property answersGiven
        expect(instance).to.have.property('answersGiven');
        // expect(instance.answersGiven).to.be(expectedValueLiteral);
      });

      it('should have the property numberOfAnswersGiven (base name: "NumberOfAnswersGiven")', function() {
        // TODO: update the code to test the property numberOfAnswersGiven
        expect(instance).to.have.property('numberOfAnswersGiven');
        // expect(instance.numberOfAnswersGiven).to.be(expectedValueLiteral);
      });

      it('should have the property profilePicture (base name: "ProfilePicture")', function() {
        // TODO: update the code to test the property profilePicture
        expect(instance).to.have.property('profilePicture');
        // expect(instance.profilePicture).to.be(expectedValueLiteral);
      });

      it('should have the property email (base name: "email")', function() {
        // TODO: update the code to test the property email
        expect(instance).to.have.property('email');
        // expect(instance.email).to.be(expectedValueLiteral);
      });

    });
  });

}));
