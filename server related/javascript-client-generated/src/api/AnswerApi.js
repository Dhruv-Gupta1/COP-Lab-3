/*
 * queriKorner - OpenAPI 3.0
 * This is the API documentation of the queriKorner server application. It is based on the OpenAPI 3.0 specification.
 *
 * OpenAPI spec version: 1.0.11
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Answer} from '../model/Answer';

/**
* Answer service.
* @module api/AnswerApi
* @version 1.0.11
*/
export class AnswerApi {

    /**
    * Constructs a new AnswerApi. 
    * @alias module:api/AnswerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the changeAnswer operation.
     * @callback moduleapi/AnswerApi~changeAnswerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Answer{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change data of answer
     * Change data of answer
     * @param {Object} opts Optional parameters
     * @param {String} opts.answerId Answer data
     * @param {module:api/AnswerApi~changeAnswerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    changeAnswer(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'answerId': opts['answerId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ask_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Answer;

      return this.apiClient.callApi(
        '/answer/{answerId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteAnswer operation.
     * @callback moduleapi/AnswerApi~deleteAnswerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Answer{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an answer
     * Delete an answer
     * @param {Object} opts Optional parameters
     * @param {String} opts.answerId Answer data
     * @param {module:api/AnswerApi~deleteAnswerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteAnswer(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'answerId': opts['answerId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ask_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Answer;

      return this.apiClient.callApi(
        '/answer/{answerId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDatafromAnswer operation.
     * @callback moduleapi/AnswerApi~getDatafromAnswerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Answer{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all answer data
     * Get all answer data
     * @param {Object} opts Optional parameters
     * @param {String} opts.answerId Answer data
     * @param {module:api/AnswerApi~getDatafromAnswerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getDatafromAnswer(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'answerId': opts['answerId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ask_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Answer;

      return this.apiClient.callApi(
        '/answer/{answerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postAnswer operation.
     * @callback moduleapi/AnswerApi~postAnswerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Answer{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post your answer
     * Post your answer
     * @param {module:model/Answer} body Answer to be added to the database
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionId Query data
     * @param {module:api/AnswerApi~postAnswerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postAnswer(body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postAnswer");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'questionId': opts['questionId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ask_auth'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Answer;

      return this.apiClient.callApi(
        '/answer/{questionId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the upvoteAnswer operation.
     * @callback moduleapi/AnswerApi~upvoteAnswerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Answer{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upvote/Downvote an answer
     * Upvote/Downvote an answer
     * @param {Object} opts Optional parameters
     * @param {String} opts.answerId Answer id
     * @param {module:api/AnswerApi~upvoteAnswerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    upvoteAnswer(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'answerId': opts['answerId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ask_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Answer;

      return this.apiClient.callApi(
        '/answer/votes/{answerId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}