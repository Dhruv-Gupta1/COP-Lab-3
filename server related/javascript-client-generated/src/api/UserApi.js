/*
 * queriKorner - OpenAPI 3.0
 * This is the API documentation of the queriKorner server application. It is based on the OpenAPI 3.0 specification.
 *
 * OpenAPI spec version: 1.0.11
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {User} from '../model/User';

/**
* User service.
* @module api/UserApi
* @version 1.0.11
*/
export class UserApi {

    /**
    * Constructs a new UserApi. 
    * @alias module:api/UserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the changeUser operation.
     * @callback moduleapi/UserApi~changeUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change data of user
     * Change data of user
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId User id
     * @param {module:api/UserApi~changeUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    changeUser(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'userId': opts['userId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ask_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = User;

      return this.apiClient.callApi(
        '/user/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createUser operation.
     * @callback moduleapi/UserApi~createUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create user
     * Create user
     * @param {module:model/User} body User to be added to the database
     * @param {module:api/UserApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createUser(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createUser");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ask_auth'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = User;

      return this.apiClient.callApi(
        '/user', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback moduleapi/UserApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an user
     * Delete an user
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId User id
     * @param {module:api/UserApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteUser(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'userId': opts['userId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ask_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = User;

      return this.apiClient.callApi(
        '/user/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getUserData operation.
     * @callback moduleapi/UserApi~getUserDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user data
     * Get user data
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId User id
     * @param {module:api/UserApi~getUserDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getUserData(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'userId': opts['userId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ask_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = User;

      return this.apiClient.callApi(
        '/user/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the loginUser operation.
     * @callback moduleapi/UserApi~loginUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login user
     * Login user
     * @param {Object} opts Optional parameters
     * @param {String} opts.username Username
     * @param {String} opts.password Password
     * @param {module:api/UserApi~loginUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    loginUser(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'username': opts['username'],'password': opts['password']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ask_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = User;

      return this.apiClient.callApi(
        '/user/login', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the logoutUser operation.
     * @callback moduleapi/UserApi~logoutUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Logout user
     * Logout user
     * @param {module:api/UserApi~logoutUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    logoutUser(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ask_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = User;

      return this.apiClient.callApi(
        '/user/logout', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the signUpUser operation.
     * @callback moduleapi/UserApi~signUpUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create user
     * Create user
     * @param {module:model/User} body User to be added to the database
     * @param {Object} opts Optional parameters
     * @param {String} opts.username 
     * @param {String} opts.email 
     * @param {String} opts.password 
     * @param {module:api/UserApi~signUpUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    signUpUser(body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling signUpUser");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'username': opts['username'],'email': opts['email'],'password': opts['password']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ask_auth'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = User;

      return this.apiClient.callApi(
        '/user/signup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}