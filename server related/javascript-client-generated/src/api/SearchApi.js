/*
 * queriKorner - OpenAPI 3.0
 * This is the API documentation of the queriKorner server application. It is based on the OpenAPI 3.0 specification.
 *
 * OpenAPI spec version: 1.0.11
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Search} from '../model/Search';

/**
* Search service.
* @module api/SearchApi
* @version 1.0.11
*/
export class SearchApi {

    /**
    * Constructs a new SearchApi. 
    * @alias module:api/SearchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the searchTags operation.
     * @callback moduleapi/SearchApi~searchTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Search{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search tags
     * Search tags
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.tags Tags to search
     * @param {module:api/SearchApi~searchTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    searchTags(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi')
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ask_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Search;

      return this.apiClient.callApi(
        '/search/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the sortQuestions operation.
     * @callback moduleapi/SearchApi~sortQuestionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Search{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sort questions
     * Sort questions
     * @param {Object} opts Optional parameters
     * @param {String} opts.sortId Sort id
     * @param {module:api/SearchApi~sortQuestionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    sortQuestions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'sortId': opts['sortId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ask_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Search;

      return this.apiClient.callApi(
        '/search/{sortId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}