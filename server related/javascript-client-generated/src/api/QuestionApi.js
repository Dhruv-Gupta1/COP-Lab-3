/*
 * queriKorner - OpenAPI 3.0
 * This is the API documentation of the queriKorner server application. It is based on the OpenAPI 3.0 specification.
 *
 * OpenAPI spec version: 1.0.11
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.41
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Question} from '../model/Question';

/**
* Question service.
* @module api/QuestionApi
* @version 1.0.11
*/
export class QuestionApi {

    /**
    * Constructs a new QuestionApi. 
    * @alias module:api/QuestionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the askQuery operation.
     * @callback moduleapi/QuestionApi~askQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Question{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ask your query
     * Ask your query
     * @param {module:model/Question} body Query to be added to the database
     * @param {module:api/QuestionApi~askQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    askQuery(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling askQuery");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ask_auth'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Question;

      return this.apiClient.callApi(
        '/question', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the changeQuestion operation.
     * @callback moduleapi/QuestionApi~changeQuestionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Question{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change question data
     * Change question data
     * @param {module:model/Question} body Query to be added to the database
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionId Query data
     * @param {module:api/QuestionApi~changeQuestionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    changeQuestion(body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling changeQuestion");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'questionId': opts['questionId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ask_auth'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Question;

      return this.apiClient.callApi(
        '/question/{questionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteQuery operation.
     * @callback moduleapi/QuestionApi~deleteQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Question{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a query
     * Delete a query
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionId Query data
     * @param {module:api/QuestionApi~deleteQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteQuery(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'questionId': opts['questionId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ask_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Question;

      return this.apiClient.callApi(
        '/question/{questionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getData operation.
     * @callback moduleapi/QuestionApi~getDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Question{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all query data
     * Get all query data
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionId Query data
     * @param {module:api/QuestionApi~getDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getData(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'questionId': opts['questionId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ask_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Question;

      return this.apiClient.callApi(
        '/question/{questionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the upvoteQuestion operation.
     * @callback moduleapi/QuestionApi~upvoteQuestionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Question{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upvote/Downvote a question
     * Upvote/Downvote a question
     * @param {module:model/Question} body Query to be added to the database
     * @param {Object} opts Optional parameters
     * @param {String} opts.questionId Question id
     * @param {module:api/QuestionApi~upvoteQuestionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    upvoteQuestion(body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling upvoteQuestion");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'questionId': opts['questionId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ask_auth'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Question;

      return this.apiClient.callApi(
        '/question/votes/{questionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}