openapi: 3.0.3
info:
  title: queriKorner - OpenAPI 3.0
  description: This is the API documentation of the queriKorner server application.
    It is based on the OpenAPI 3.0 specification.
  version: 1.0.11
servers:
- url: /
tags:
- name: Question
  description: ask queries
- name: Answer
  description: post answers to questions
- name: User
  description: information about users
- name: Tags
  description: description about tags
- name: Search
  description: get answers to your queries
paths:
  /question:
    post:
      tags:
      - Question
      summary: Ask your query
      description: Ask your query
      operationId: ask_query
      requestBody:
        description: Query to be added to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
          application/xml:
            schema:
              $ref: '#/components/schemas/Question'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
            application/xml:
              schema:
                $ref: '#/components/schemas/Question'
        "400":
          description: Invalid question
        "404":
          description: Question not found
      security:
      - ask_auth:
        - write:answers
        - read:answers
      x-openapi-router-controller: swagger_server.controllers.question_controller
  /question/{questionId}:
    get:
      tags:
      - Question
      summary: Get all query data
      description: Get all query data
      operationId: get_data
      parameters:
      - name: questionId
        in: query
        description: Query data
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: "71932"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
            application/xml:
              schema:
                $ref: '#/components/schemas/Question'
        "400":
          description: Invalid data format
        "404":
          description: Question not found
      security:
      - ask_auth:
        - write:answers
        - read:answers
      x-openapi-router-controller: swagger_server.controllers.question_controller
    put:
      tags:
      - Question
      summary: Change question data
      description: Change question data
      operationId: change_question
      parameters:
      - name: questionId
        in: query
        description: Query data
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: "71932"
      requestBody:
        description: Query to be added to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
          application/xml:
            schema:
              $ref: '#/components/schemas/Question'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
            application/xml:
              schema:
                $ref: '#/components/schemas/Question'
        "400":
          description: Invalid data format
        "404":
          description: Question not found
      security:
      - ask_auth:
        - write:answers
        - read:answers
      x-openapi-router-controller: swagger_server.controllers.question_controller
    delete:
      tags:
      - Question
      summary: Delete a query
      description: Delete a query
      operationId: delete_query
      parameters:
      - name: questionId
        in: query
        description: Query data
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: "71932"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
            application/xml:
              schema:
                $ref: '#/components/schemas/Question'
        "400":
          description: Invalid data format
        "404":
          description: Question not found
      security:
      - ask_auth:
        - write:answers
        - read:answers
      x-openapi-router-controller: swagger_server.controllers.question_controller
  /question/votes/{questionId}:
    put:
      tags:
      - Question
      summary: Upvote/Downvote a question
      description: Upvote/Downvote a question
      operationId: upvote_question
      parameters:
      - name: questionId
        in: query
        description: Question id
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: "71932"
      requestBody:
        description: Query to be added to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
          application/xml:
            schema:
              $ref: '#/components/schemas/Question'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
            application/xml:
              schema:
                $ref: '#/components/schemas/Question'
        "400":
          description: Invalid data format
        "404":
          description: Question not found
      security:
      - ask_auth:
        - write:answers
        - read:answers
      x-openapi-router-controller: swagger_server.controllers.question_controller
  /answer/{questionId}:
    post:
      tags:
      - Answer
      summary: Post your answer
      description: Post your answer
      operationId: post_answer
      parameters:
      - name: questionId
        in: query
        description: Query data
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: "71932"
      requestBody:
        description: Answer to be added to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Answer'
          application/xml:
            schema:
              $ref: '#/components/schemas/Answer'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
            application/xml:
              schema:
                $ref: '#/components/schemas/Answer'
        "400":
          description: Invalid answer
        "404":
          description: Answer not found
      security:
      - ask_auth:
        - write:answers
        - read:answers
      x-openapi-router-controller: swagger_server.controllers.answer_controller
  /answer/{answerId}:
    get:
      tags:
      - Answer
      summary: Get all answer data
      description: Get all answer data
      operationId: get_datafrom_answer
      parameters:
      - name: answerId
        in: query
        description: Answer data
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: "71932"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
            application/xml:
              schema:
                $ref: '#/components/schemas/Answer'
        "400":
          description: Invalid data format
        "404":
          description: Answer not found
      security:
      - ask_auth:
        - write:answers
        - read:answers
      x-openapi-router-controller: swagger_server.controllers.answer_controller
    put:
      tags:
      - Answer
      summary: Change data of answer
      description: Change data of answer
      operationId: change_answer
      parameters:
      - name: answerId
        in: query
        description: Answer data
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: "71932"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
            application/xml:
              schema:
                $ref: '#/components/schemas/Answer'
        "400":
          description: Invalid data format
        "404":
          description: Answer not found
      security:
      - ask_auth:
        - write:answers
        - read:answers
      x-openapi-router-controller: swagger_server.controllers.answer_controller
    delete:
      tags:
      - Answer
      summary: Delete an answer
      description: Delete an answer
      operationId: delete_answer
      parameters:
      - name: answerId
        in: query
        description: Answer data
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: "71932"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
            application/xml:
              schema:
                $ref: '#/components/schemas/Answer'
        "400":
          description: Invalid data format
        "404":
          description: Answer not found
      security:
      - ask_auth:
        - write:answers
        - read:answers
      x-openapi-router-controller: swagger_server.controllers.answer_controller
  /answer/votes/{answerId}:
    put:
      tags:
      - Answer
      summary: Upvote/Downvote an answer
      description: Upvote/Downvote an answer
      operationId: upvote_answer
      parameters:
      - name: answerId
        in: query
        description: Answer id
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: "71932"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
            application/xml:
              schema:
                $ref: '#/components/schemas/Answer'
        "400":
          description: Invalid data format
        "404":
          description: Answer not found
      security:
      - ask_auth:
        - write:answers
        - read:answers
      x-openapi-router-controller: swagger_server.controllers.answer_controller
  /user:
    post:
      tags:
      - User
      summary: Create user
      description: Create user
      operationId: create_user
      requestBody:
        description: User to be added to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid data format
        "404":
          description: User not found
      security:
      - ask_auth:
        - write:answers
        - read:answers
      x-openapi-router-controller: swagger_server.controllers.user_controller
  /user/{userId}:
    get:
      tags:
      - User
      summary: Get user data
      description: Get user data
      operationId: get_user_data
      parameters:
      - name: userId
        in: query
        description: User id
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: "71932"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid data format
        "404":
          description: User not found
      security:
      - ask_auth:
        - write:answers
        - read:answers
      x-openapi-router-controller: swagger_server.controllers.user_controller
    put:
      tags:
      - User
      summary: Change data of user
      description: Change data of user
      operationId: change_user
      parameters:
      - name: userId
        in: query
        description: User id
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: "71932"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid data format
        "404":
          description: User not found
      security:
      - ask_auth:
        - write:answers
        - read:answers
      x-openapi-router-controller: swagger_server.controllers.user_controller
    delete:
      tags:
      - User
      summary: Delete an user
      description: Delete an user
      operationId: delete_user
      parameters:
      - name: userId
        in: query
        description: User id
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: "71932"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid data format
        "404":
          description: User not found
      security:
      - ask_auth:
        - write:answers
        - read:answers
      x-openapi-router-controller: swagger_server.controllers.user_controller
  /user/login:
    get:
      tags:
      - User
      summary: Login user
      description: Login user
      operationId: login_user
      parameters:
      - name: username
        in: query
        description: Username
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: kevin
      - name: password
        in: query
        description: Password
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: '****'
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid Username/Password
      security:
      - ask_auth:
        - write:answers
        - read:answers
      x-openapi-router-controller: swagger_server.controllers.user_controller
  /user/logout:
    get:
      tags:
      - User
      summary: Logout user
      description: Logout user
      operationId: logout_user
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Cant logout
        "404":
          description: User not found
      security:
      - ask_auth:
        - write:answers
        - read:answers
      x-openapi-router-controller: swagger_server.controllers.user_controller
  /user/signup:
    post:
      tags:
      - User
      summary: Create user
      description: Create user
      operationId: sign_up_user
      parameters:
      - name: username
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: kevin
      - name: email
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: kevin@iitd.ac.in
      - name: password
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: '****'
      requestBody:
        description: User to be added to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid data format
        "404":
          description: User not found
      security:
      - ask_auth:
        - write:answers
        - read:answers
      x-openapi-router-controller: swagger_server.controllers.user_controller
  /tags:
    post:
      tags:
      - Tags
      summary: Create tag
      description: Create tag
      operationId: create_tag
      requestBody:
        description: Tag to be added to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
          application/xml:
            schema:
              $ref: '#/components/schemas/Tag'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
            application/xml:
              schema:
                $ref: '#/components/schemas/Tag'
        "400":
          description: Invalid data format
        "404":
          description: Tag not found
      security:
      - ask_auth:
        - write:answers
        - read:answers
      x-openapi-router-controller: swagger_server.controllers.tags_controller
  /tags/{tagId}:
    get:
      tags:
      - Tags
      summary: Get tag data
      description: Get tag data
      operationId: get_tag_data
      parameters:
      - name: tagId
        in: query
        description: Tag id
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: "71932"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
            application/xml:
              schema:
                $ref: '#/components/schemas/Tag'
        "400":
          description: Invalid data format
        "404":
          description: Tag not found
      security:
      - ask_auth:
        - write:answers
        - read:answers
      x-openapi-router-controller: swagger_server.controllers.tags_controller
    delete:
      tags:
      - Tags
      summary: Delete an tag
      description: Delete an tag
      operationId: delete_tag
      parameters:
      - name: tagId
        in: query
        description: Tag id
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: "71932"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
            application/xml:
              schema:
                $ref: '#/components/schemas/Tag'
        "400":
          description: Invalid data format
        "404":
          description: Tag not found
      security:
      - ask_auth:
        - write:answers
        - read:answers
      x-openapi-router-controller: swagger_server.controllers.tags_controller
  /search/tags:
    get:
      tags:
      - Search
      summary: Search tags
      description: Search tags
      operationId: search_tags
      parameters:
      - name: tags
        in: query
        description: Tags to search
        required: false
        style: form
        explode: true
        schema:
          type: array
          example:
          - java
          - python
          items:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Search'
            application/xml:
              schema:
                $ref: '#/components/schemas/Search'
        "400":
          description: Invalid data format
        "404":
          description: Tag not found
      security:
      - ask_auth:
        - write:answers
        - read:answers
      x-openapi-router-controller: swagger_server.controllers.search_controller
  /search/{sortId}:
    get:
      tags:
      - Search
      summary: Sort questions
      description: Sort questions
      operationId: sort_questions
      parameters:
      - name: sortId
        in: query
        description: Sort id
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: popular
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Search'
            application/xml:
              schema:
                $ref: '#/components/schemas/Search'
        "400":
          description: Invalid data format
        "404":
          description: Tag not found
      security:
      - ask_auth:
        - write:answers
        - read:answers
      x-openapi-router-controller: swagger_server.controllers.search_controller
components:
  schemas:
    Question:
      type: object
      properties:
        questionId:
          type: string
          example: "71932"
        Title:
          type: string
          example: How to create a new file in Java?
        Body:
          type: string
          example: I am trying to create a new file in Java. I am using the following
            code but it is not working. Can anyone help me?
        Tags:
          type: array
          example:
          - java
          - file
          items:
            type: string
        Votes:
          type: integer
          example: 10
        AnswerIds:
          type: array
          example:
          - "213212"
          - "314132"
          items:
            type: string
        NumberOfAnswers:
          type: integer
          example: 2
        CreatedAt:
          type: string
          example: 2019-10-10T12:00:00Z
        Accepted:
          type: boolean
          example: false
        CreatedBy:
          type: string
          example: Kevin
      example:
        questionId: "71932"
        CreatedBy: Kevin
        CreatedAt: 2019-10-10T12:00:00Z
        AnswerIds:
        - "213212"
        - "314132"
        NumberOfAnswers: 2
        Title: How to create a new file in Java?
        Votes: 10
        Body: I am trying to create a new file in Java. I am using the following code
          but it is not working. Can anyone help me?
        Tags:
        - java
        - file
        Accepted: false
    Answer:
      type: object
      properties:
        answerId:
          type: string
          example: "71932"
        Body:
          type: string
          example: Here is how to do it...
        Votes:
          type: integer
          example: 10
        questionId:
          type: string
          example: "71932"
        CreatedBy:
          type: string
          example: Andrew
        CreatedAt:
          type: string
          example: 2019-10-10T12:00:00Z
      example:
        answerId: "71932"
        questionId: "71932"
        CreatedBy: Andrew
        CreatedAt: 2019-10-10T12:00:00Z
        Votes: 10
        Body: Here is how to do it...
    Tag:
      type: object
      properties:
        tagId:
          type: string
          example: "71932"
        Name:
          type: string
          example: java
        NumberOfQuestions:
          type: integer
          example: 1077
        description:
          type: string
          example: "Java is a general-purpose computer-programming language that is\
            \ concurrent, class-based, object-oriented, and specifically designed\
            \ to have as few implementation dependencies as possible."
      example:
        tagId: "71932"
        NumberOfQuestions: 1077
        description: "Java is a general-purpose computer-programming language that\
          \ is concurrent, class-based, object-oriented, and specifically designed\
          \ to have as few implementation dependencies as possible."
        Name: java
    User:
      type: object
      properties:
        userId:
          type: string
          example: "71932"
        username:
          type: string
          example: Kevin
        password:
          type: string
          example: 12434kevin@123777
        rating:
          type: integer
          example: 1791
        QuestionsAsked:
          type: array
          example:
          - "71932"
          - "71933"
          items:
            type: string
        NumberOfQuestionsAsked:
          type: integer
          example: 2
        AnswersGiven:
          type: array
          example:
          - "71932"
          - "71933"
          items:
            type: string
        NumberOfAnswersGiven:
          type: integer
          example: 2
        ProfilePicture:
          type: string
          example: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
        email:
          type: string
          example: kevin@iitd.ac.in
      example:
        password: 12434kevin@123777
        NumberOfAnswersGiven: 2
        NumberOfQuestionsAsked: 2
        rating: 1791
        AnswersGiven:
        - "71932"
        - "71933"
        QuestionsAsked:
        - "71932"
        - "71933"
        userId: "71932"
        ProfilePicture: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
        email: kevin@iitd.ac.in
        username: Kevin
    Search:
      type: object
      properties:
        searchTags:
          type: array
          example:
          - java
          - python
          items:
            type: string
        searchSort:
          type: string
          example: popular
        searchResults:
          type: array
          example:
          - "71932"
          - "71933"
          items:
            type: string
        NumberOfSearchResults:
          type: integer
          example: 2
      example:
        searchSort: popular
        searchTags:
        - java
        - python
        NumberOfSearchResults: 2
        searchResults:
        - "71932"
        - "71933"
  requestBodies:
    Answer:
      description: Answers given to a question
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Answer'
        application/xml:
          schema:
            $ref: '#/components/schemas/Answer'
    User:
      description: user object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
        application/xml:
          schema:
            $ref: '#/components/schemas/User'
    Question:
      description: question object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Question'
        application/xml:
          schema:
            $ref: '#/components/schemas/Question'
    Tag:
      description: tag object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Tag'
        application/xml:
          schema:
            $ref: '#/components/schemas/Tag'
  securitySchemes:
    ask_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://queriKorner.swagger.io/oauth/authorize
          scopes:
            write:answers: modify answers in your account
            read:answers: read your answers
      x-tokenInfoFunc: swagger_server.controllers.authorization_controller.check_ask_auth
      x-scopeValidateFunc: swagger_server.controllers.authorization_controller.validate_scope_ask_auth
    api_key:
      type: apiKey
      name: api_key
      in: header
      x-apikeyInfoFunc: swagger_server.controllers.authorization_controller.check_api_key

