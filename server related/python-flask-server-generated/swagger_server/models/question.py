# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Question(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, question_id: str=None, title: str=None, body: str=None, tags: List[str]=None, votes: int=None, answer_ids: List[str]=None, number_of_answers: int=None, created_at: str=None, accepted: bool=None, created_by: str=None):  # noqa: E501
        """Question - a model defined in Swagger

        :param question_id: The question_id of this Question.  # noqa: E501
        :type question_id: str
        :param title: The title of this Question.  # noqa: E501
        :type title: str
        :param body: The body of this Question.  # noqa: E501
        :type body: str
        :param tags: The tags of this Question.  # noqa: E501
        :type tags: List[str]
        :param votes: The votes of this Question.  # noqa: E501
        :type votes: int
        :param answer_ids: The answer_ids of this Question.  # noqa: E501
        :type answer_ids: List[str]
        :param number_of_answers: The number_of_answers of this Question.  # noqa: E501
        :type number_of_answers: int
        :param created_at: The created_at of this Question.  # noqa: E501
        :type created_at: str
        :param accepted: The accepted of this Question.  # noqa: E501
        :type accepted: bool
        :param created_by: The created_by of this Question.  # noqa: E501
        :type created_by: str
        """
        self.swagger_types = {
            'question_id': str,
            'title': str,
            'body': str,
            'tags': List[str],
            'votes': int,
            'answer_ids': List[str],
            'number_of_answers': int,
            'created_at': str,
            'accepted': bool,
            'created_by': str
        }

        self.attribute_map = {
            'question_id': 'questionId',
            'title': 'Title',
            'body': 'Body',
            'tags': 'Tags',
            'votes': 'Votes',
            'answer_ids': 'AnswerIds',
            'number_of_answers': 'NumberOfAnswers',
            'created_at': 'CreatedAt',
            'accepted': 'Accepted',
            'created_by': 'CreatedBy'
        }
        self._question_id = question_id
        self._title = title
        self._body = body
        self._tags = tags
        self._votes = votes
        self._answer_ids = answer_ids
        self._number_of_answers = number_of_answers
        self._created_at = created_at
        self._accepted = accepted
        self._created_by = created_by

    @classmethod
    def from_dict(cls, dikt) -> 'Question':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Question of this Question.  # noqa: E501
        :rtype: Question
        """
        return util.deserialize_model(dikt, cls)

    @property
    def question_id(self) -> str:
        """Gets the question_id of this Question.


        :return: The question_id of this Question.
        :rtype: str
        """
        return self._question_id

    @question_id.setter
    def question_id(self, question_id: str):
        """Sets the question_id of this Question.


        :param question_id: The question_id of this Question.
        :type question_id: str
        """

        self._question_id = question_id

    @property
    def title(self) -> str:
        """Gets the title of this Question.


        :return: The title of this Question.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Question.


        :param title: The title of this Question.
        :type title: str
        """

        self._title = title

    @property
    def body(self) -> str:
        """Gets the body of this Question.


        :return: The body of this Question.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body: str):
        """Sets the body of this Question.


        :param body: The body of this Question.
        :type body: str
        """

        self._body = body

    @property
    def tags(self) -> List[str]:
        """Gets the tags of this Question.


        :return: The tags of this Question.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[str]):
        """Sets the tags of this Question.


        :param tags: The tags of this Question.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def votes(self) -> int:
        """Gets the votes of this Question.


        :return: The votes of this Question.
        :rtype: int
        """
        return self._votes

    @votes.setter
    def votes(self, votes: int):
        """Sets the votes of this Question.


        :param votes: The votes of this Question.
        :type votes: int
        """

        self._votes = votes

    @property
    def answer_ids(self) -> List[str]:
        """Gets the answer_ids of this Question.


        :return: The answer_ids of this Question.
        :rtype: List[str]
        """
        return self._answer_ids

    @answer_ids.setter
    def answer_ids(self, answer_ids: List[str]):
        """Sets the answer_ids of this Question.


        :param answer_ids: The answer_ids of this Question.
        :type answer_ids: List[str]
        """

        self._answer_ids = answer_ids

    @property
    def number_of_answers(self) -> int:
        """Gets the number_of_answers of this Question.


        :return: The number_of_answers of this Question.
        :rtype: int
        """
        return self._number_of_answers

    @number_of_answers.setter
    def number_of_answers(self, number_of_answers: int):
        """Sets the number_of_answers of this Question.


        :param number_of_answers: The number_of_answers of this Question.
        :type number_of_answers: int
        """

        self._number_of_answers = number_of_answers

    @property
    def created_at(self) -> str:
        """Gets the created_at of this Question.


        :return: The created_at of this Question.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: str):
        """Sets the created_at of this Question.


        :param created_at: The created_at of this Question.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def accepted(self) -> bool:
        """Gets the accepted of this Question.


        :return: The accepted of this Question.
        :rtype: bool
        """
        return self._accepted

    @accepted.setter
    def accepted(self, accepted: bool):
        """Sets the accepted of this Question.


        :param accepted: The accepted of this Question.
        :type accepted: bool
        """

        self._accepted = accepted

    @property
    def created_by(self) -> str:
        """Gets the created_by of this Question.


        :return: The created_by of this Question.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by: str):
        """Sets the created_by of this Question.


        :param created_by: The created_by of this Question.
        :type created_by: str
        """

        self._created_by = created_by
