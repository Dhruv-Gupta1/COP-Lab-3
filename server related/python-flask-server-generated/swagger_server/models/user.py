# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class User(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, user_id: str=None, username: str=None, password: str=None, rating: int=None, questions_asked: List[str]=None, number_of_questions_asked: int=None, answers_given: List[str]=None, number_of_answers_given: int=None, profile_picture: str=None, email: str=None):  # noqa: E501
        """User - a model defined in Swagger

        :param user_id: The user_id of this User.  # noqa: E501
        :type user_id: str
        :param username: The username of this User.  # noqa: E501
        :type username: str
        :param password: The password of this User.  # noqa: E501
        :type password: str
        :param rating: The rating of this User.  # noqa: E501
        :type rating: int
        :param questions_asked: The questions_asked of this User.  # noqa: E501
        :type questions_asked: List[str]
        :param number_of_questions_asked: The number_of_questions_asked of this User.  # noqa: E501
        :type number_of_questions_asked: int
        :param answers_given: The answers_given of this User.  # noqa: E501
        :type answers_given: List[str]
        :param number_of_answers_given: The number_of_answers_given of this User.  # noqa: E501
        :type number_of_answers_given: int
        :param profile_picture: The profile_picture of this User.  # noqa: E501
        :type profile_picture: str
        :param email: The email of this User.  # noqa: E501
        :type email: str
        """
        self.swagger_types = {
            'user_id': str,
            'username': str,
            'password': str,
            'rating': int,
            'questions_asked': List[str],
            'number_of_questions_asked': int,
            'answers_given': List[str],
            'number_of_answers_given': int,
            'profile_picture': str,
            'email': str
        }

        self.attribute_map = {
            'user_id': 'userId',
            'username': 'username',
            'password': 'password',
            'rating': 'rating',
            'questions_asked': 'QuestionsAsked',
            'number_of_questions_asked': 'NumberOfQuestionsAsked',
            'answers_given': 'AnswersGiven',
            'number_of_answers_given': 'NumberOfAnswersGiven',
            'profile_picture': 'ProfilePicture',
            'email': 'email'
        }
        self._user_id = user_id
        self._username = username
        self._password = password
        self._rating = rating
        self._questions_asked = questions_asked
        self._number_of_questions_asked = number_of_questions_asked
        self._answers_given = answers_given
        self._number_of_answers_given = number_of_answers_given
        self._profile_picture = profile_picture
        self._email = email

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self) -> str:
        """Gets the user_id of this User.


        :return: The user_id of this User.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this User.


        :param user_id: The user_id of this User.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def username(self) -> str:
        """Gets the username of this User.


        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this User.


        :param username: The username of this User.
        :type username: str
        """

        self._username = username

    @property
    def password(self) -> str:
        """Gets the password of this User.


        :return: The password of this User.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this User.


        :param password: The password of this User.
        :type password: str
        """

        self._password = password

    @property
    def rating(self) -> int:
        """Gets the rating of this User.


        :return: The rating of this User.
        :rtype: int
        """
        return self._rating

    @rating.setter
    def rating(self, rating: int):
        """Sets the rating of this User.


        :param rating: The rating of this User.
        :type rating: int
        """

        self._rating = rating

    @property
    def questions_asked(self) -> List[str]:
        """Gets the questions_asked of this User.


        :return: The questions_asked of this User.
        :rtype: List[str]
        """
        return self._questions_asked

    @questions_asked.setter
    def questions_asked(self, questions_asked: List[str]):
        """Sets the questions_asked of this User.


        :param questions_asked: The questions_asked of this User.
        :type questions_asked: List[str]
        """

        self._questions_asked = questions_asked

    @property
    def number_of_questions_asked(self) -> int:
        """Gets the number_of_questions_asked of this User.


        :return: The number_of_questions_asked of this User.
        :rtype: int
        """
        return self._number_of_questions_asked

    @number_of_questions_asked.setter
    def number_of_questions_asked(self, number_of_questions_asked: int):
        """Sets the number_of_questions_asked of this User.


        :param number_of_questions_asked: The number_of_questions_asked of this User.
        :type number_of_questions_asked: int
        """

        self._number_of_questions_asked = number_of_questions_asked

    @property
    def answers_given(self) -> List[str]:
        """Gets the answers_given of this User.


        :return: The answers_given of this User.
        :rtype: List[str]
        """
        return self._answers_given

    @answers_given.setter
    def answers_given(self, answers_given: List[str]):
        """Sets the answers_given of this User.


        :param answers_given: The answers_given of this User.
        :type answers_given: List[str]
        """

        self._answers_given = answers_given

    @property
    def number_of_answers_given(self) -> int:
        """Gets the number_of_answers_given of this User.


        :return: The number_of_answers_given of this User.
        :rtype: int
        """
        return self._number_of_answers_given

    @number_of_answers_given.setter
    def number_of_answers_given(self, number_of_answers_given: int):
        """Sets the number_of_answers_given of this User.


        :param number_of_answers_given: The number_of_answers_given of this User.
        :type number_of_answers_given: int
        """

        self._number_of_answers_given = number_of_answers_given

    @property
    def profile_picture(self) -> str:
        """Gets the profile_picture of this User.


        :return: The profile_picture of this User.
        :rtype: str
        """
        return self._profile_picture

    @profile_picture.setter
    def profile_picture(self, profile_picture: str):
        """Sets the profile_picture of this User.


        :param profile_picture: The profile_picture of this User.
        :type profile_picture: str
        """

        self._profile_picture = profile_picture

    @property
    def email(self) -> str:
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """

        self._email = email
